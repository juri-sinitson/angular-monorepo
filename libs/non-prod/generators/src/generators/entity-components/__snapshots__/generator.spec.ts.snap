// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`entity-components generator should match snapshot ON any BY any 1`] = `
"import { ChangeDetectionStrategy, Component } from '@angular/core';

// TODO! Adjust the project tags.
// eslint-disable-next-line @nx/enforce-module-boundaries
import {
  BasicTableComponent,
  CommonWrapperComponent,
} from '@angular-monorepo/shared/ui-common';

// TODO! Adjust the project tags.
// eslint-disable-next-line @nx/enforce-module-boundaries
import { AbstractEntitiesListComponent } from '@angular-monorepo/shared/ui-common';

// -- STEP 1: ADJUST THE ENTITY INTERFACE PATH! --
// TODO! Adjust the project tags.
// eslint-disable-next-line @nx/enforce-module-boundaries
import { MyProductInterface } from '@angular-monorepo/shared-business/examples';

@Component({
  selector: 'angular-monorepo-my-products',
  standalone: true,
  imports: [BasicTableComponent, CommonWrapperComponent],
  template: \`
    <common-common-wrapper
      [messages]="messages()"
      [isLoading]="isLoading()"
      [header]="header()"
      [noData]="noData()"
    >
      <common-basic-table
        [columns]="columns"
        [data]="data()"
      ></common-basic-table>
    </common-common-wrapper>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class MyProductsComponent extends AbstractEntitiesListComponent<MyProductInterface> {
  protected override getColumns(): Array<[keyof MyProductInterface, string]> {
    // -- STEP 2: ADJUST THE COLUMNS NAMES AND THE SEQUENCE!
    // Adjusting the columns names and the sequence
    return [
      ['name', 'Name'],
      ['category', 'Category'],
      ['description', 'Description'],
      ['inventoryStatus', 'Status'],
      ['code', 'Code'],
      ['price', 'Price'],
      ['quantity', 'Quantity'],
      ['rating', 'Rating'],
    ];
  }
}
"
`;

exports[`entity-components generator should match snapshot ON any BY any 2`] = `
"import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import {
  applicationConfig,
  type Meta,
  type StoryObj,
} from '@storybook/angular';

import { MyProductsComponent } from './my-products.component';
// eslint-disable-next-line @nx/enforce-module-boundaries
import { MyProductInterface } from '@angular-monorepo/shared-business/examples';
// eslint-disable-next-line @nx/enforce-module-boundaries
import {
  MessageInterface,
  commonAppConfig,
} from '@angular-monorepo/shared/util-common';
// eslint-disable-next-line @nx/enforce-module-boundaries
import {
  errorStory,
  getFirstElemByText,
  expectNoElem,
  expectText,
  getCanvas,
  loadingStory,
  noDataStory,
} from '@angular-monorepo/shared/util-common-non-prod';

const MyProductList: MyProductInterface[] =
  // -- STEP 1: Adjust the example data
  // TIP: you can use copilot or similar AI-solution for this
  // by providing the entity interface to the AI and telling
  // to adjust this file to that entity interface for you.
  [
    {
      id: '1001',
      code: 'abc123',
      name: 'T-Shirt',
      description: 'Product Description',
      price: 20,
      category: 'Clothing',
      quantity: 50,
      inventoryStatus: 'INSTOCK',
      rating: 4,
    },
    {
      id: '1002',
      code: 'def456',
      name: 'Jeans',
      description: 'Product Description',
      price: 50,
      category: 'Clothing',
      quantity: 30,
      inventoryStatus: 'INSTOCK',
      rating: 5,
    },
    {
      id: '1003',
      code: 'ghi789',
      name: 'Shoes',
      description: 'Product Description',
      price: 80,
      category: 'Footwear',
      quantity: 20,
      inventoryStatus: 'INSTOCK',
      rating: 4.5,
    },
    {
      id: '1004',
      code: 'h456wer53',
      name: 'Bracelet',
      description: 'Product Description',
      price: 15,
      category: 'Accessories',
      quantity: 73,
      inventoryStatus: 'INSTOCK',
      rating: 4,
    },
    {
      id: '1005',
      code: 'jkl012',
      name: 'Hat',
      description: 'Product Description',
      price: 10,
      category: 'Clothing',
      quantity: 100,
      inventoryStatus: 'INSTOCK',
      rating: 3.5,
    },
  ];

@Component({
  selector: 'angular-monorepo-my-products-test-wrapper',
  standalone: true,
  imports: [MyProductsComponent],
  template: \`
    <angular-monorepo-my-products
      [data]="data"
      [messages]="messages"
      [isLoading]="isLoading"
      [header]="header"
      [noData]="noData"
    >
    </angular-monorepo-my-products>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class MyProductsTestWrapperComponent {
  @Input() data: MyProductInterface[] = [];
  @Input() messages: MessageInterface[] = [];
  @Input() isLoading = false;
  @Input() noData = false;
  @Input() header: string | undefined = undefined;
}

const meta: Meta<MyProductsTestWrapperComponent> = {
  component: MyProductsTestWrapperComponent,
  decorators: [applicationConfig({ ...commonAppConfig })],
  // -- STEP 2: Adjust the title for the storybook to place in the
  // correct place of the components tree
  title: 'shared-business/feature-examples/MyProducts',
};
export default meta;
type Story = StoryObj<MyProductsTestWrapperComponent>;

const expectCols = async (canvas: HTMLElement) => {
  // -- STEP 3: Adjust the columns --
  await expectText('Name', canvas);
  await expectText('Category', canvas);
  await expectText('Description', canvas);
  await expectText('Status', canvas);
  await expectText('Code', canvas);
  await expectText('Price', canvas);
  await expectText('Quantity', canvas);
  await expectText('Rating', canvas);
};

const expectValues = async (canvas: HTMLElement) => {
  // -- STEP 4: Adjust the values for the first row --
  await expectText('T-Shirt', canvas);
  await getFirstElemByText('Clothing', canvas);
  await getFirstElemByText('Product Description', canvas);
  await getFirstElemByText('INSTOCK', canvas);
  await expectText('abc123', canvas);
  await getFirstElemByText('20', canvas);
  await getFirstElemByText('50', canvas);
  await getFirstElemByText('4', canvas);

  // -- STEP 5: Adjust the values for the second row --
  await expectText('Jeans', canvas);
  await getFirstElemByText('Clothing', canvas);
  await getFirstElemByText('Product Description', canvas);
  await getFirstElemByText('INSTOCK', canvas);
  await expectText('def456', canvas);
  await getFirstElemByText('50', canvas);
  await getFirstElemByText('30', canvas);
  await getFirstElemByText('5', canvas);
};

export const Primary: Story = {
  args: {
    data: MyProductList,
    messages: [],
    isLoading: false,
    noData: false,
    header: 'MyProduct',
  },
  play: async ({ canvasElement }: { canvasElement: HTMLElement }) => {
    const canvas = getCanvas(canvasElement);

    await expectCols(canvas);
    await expectValues(canvas);

    await expectNoElem('loading', canvas);
    await expectNoElem('messages', canvas);
    await expectNoElem('no-data', canvas);
  },
};

export const Loading: Story = {
  args: {
    ...loadingStory.args,
    data: MyProductList,
    header: 'MyProduct',
  },
  play: loadingStory.play,
};

export const Error: Story = {
  args: { ...errorStory.args, header: 'MyProduct' },
  play: errorStory.play,
};

export const noData: Story = {
  args: { ...noDataStory.args, header: 'MyProduct' },
  play: noDataStory.play,
};
"
`;

exports[`entity-components generator should match snapshot ON any BY any 3`] = `
"import { ChangeDetectionStrategy, Component, inject } from '@angular/core';

// TODO! Adjust the project tags.
// eslint-disable-next-line @nx/enforce-module-boundaries
// -- STEP 1: adjust the entity service path
import { MyProductEntityStoreService } from '@angular-monorepo/shared-business/examples';
import { MyProductsComponent } from './my-products.component';

// TODO! Add the wrapper and add the
// appropriate entries to storybook.
@Component({
  selector: 'angular-monorepo-my-products-smart',
  standalone: true,
  imports: [MyProductsComponent],
  providers: [MyProductEntityStoreService],
  template: \`
    <div data-testid="my-products-feature">
      <angular-monorepo-my-products
        [data]="entityService.entities()"
        [isLoading]="!!entityService.isLoading()"
        [messages]="entityService.messages()"
        [noData]="entityService.noData()"
        [header]="'MyProducts'"
      >
      </angular-monorepo-my-products>
    </div>
  \`,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class MyProductsSmartComponent {
  entityService = inject(MyProductEntityStoreService);
}
"
`;
