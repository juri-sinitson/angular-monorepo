import { Component, Input } from '@angular/core';

import { ConfirmationService } from 'primeng/api';
import { ConfirmDialogModule } from 'primeng/confirmdialog';

import { Meta, StoryObj, applicationConfig } from '@storybook/angular';

import { rootComponentConfigBase as commonAppConfig } from '@angular-monorepo/shared/util-common-non-prod';

import {
  getCanvas,
  ConfirmNotImplementedWrapperComponent,  
  expectTextInputValue,
  expectNumberInputValue,
  expectDropdownValue,
  expectFormInvalidByTextInput,
  expectFormValid,
  expectFormInvalid,
  loadingStory,
  errorStory,  
} from '@angular-monorepo/shared/util-common-non-prod';


import { MessageInterface, commonAppConfig } from '@angular-monorepo/shared/util-common';

// -- STEP 1: Import the entity interface
import { <%= entityInterfaceName %> as EntityInterface } from '@angular-monorepo/shared-business/examples';
// -- STEP 2: Import the entity form component
import { <%= entityName %>FormComponent as EntityFormComponent } from './<%= originalName %>-form.component';

const header = '<%= entityName %>';

@Component({
  selector: 'angular-monorepo-<%= originalName %>-form-wrapper',
  standalone: true,
  imports: [
    // PrimeNG
    ConfirmDialogModule,
    
    // Own
    EntityFormComponent,
  ],
  providers: [ConfirmationService],
  template: `
    <angular-monorepo-<%= originalName %>-form 
      [data]="data"
      [messages]="messages"
      [isLoading]="isLoading"
      [header]="header"  
      (onSubmit)="crudOperationHandler('Data submitting')"
      (onCancel)="cancelHandler()"
    ></angular-monorepo-<%= originalName %>-form>
    <p-confirmDialog [styleClass]="'w-23rem'"></p-confirmDialog>
  `,
})
class EntityFormWrapperComponent extends ConfirmNotImplementedWrapperComponent {
  @Input() allData: EntityInterface[] = [];
  @Input() data: EntityInterface | null = null;
  @Input() messages: MessageInterface[] = [];
  @Input() isLoading = false;  
  @Input() header: string | undefined = undefined;
}

const meta: Meta<EntityFormWrapperComponent> = {
  component: EntityFormWrapperComponent,  
  decorators: [
    applicationConfig({ ...commonAppConfig }),
    componentWrapperDecorator((story) => `<div class="w-23rem">${story}</div>`)
  ],
  // -- STEP 3: adjust the title
  title: 'shared-business/feature-examples/<%= entityName %> Form',
};
export default meta;
type Story = StoryObj<EntityFormWrapperComponent>;

// -- STEP 4: create an example entity
const data: EntityInterface = {
  id: '1006',
  code: 'xyz789',
  name: 'Example <%= entityName %>',
  description: 'This is an example <%= originalName %>.',
  price: 10,
  category: 'Example Category',
  quantity: 10,
  inventoryStatus: 'OUTOFSTOCK',
  rating: 3,
};

// -- STEP 5: Adjust the entities list
const allData: EntityInterface[] = [
  { id: '1007', name: 'Jane', surname: 'Smith', birthDay: 2, birthMonth: 5, birthYear: 1990 },
  { id: '1008', name: 'Michael', surname: 'Johnson', birthDay: 15, birthMonth: 9, birthYear: 1985 },
  { id: '1009', name: 'Emily', surname: 'Brown', birthDay: 10, birthMonth: 12, birthYear: 1998 },
  { id: '1010', name: 'David', birthDay: 20, birthMonth: 6 },
];

export const primary: Story = {
  args: {
    header,
    data,
  },
  play: async ({ canvasElement }: { canvasElement: HTMLElement }) => {
    const canvas = getCanvas(canvasElement);

    // -- STEP 6: adjust the form fields and the data
    await expectTextInputValue('id-input', '1006', canvas);
    await expectTextInputValue('code-input', 'xyz789', canvas);
    await expectTextInputValue('name-input', 'Example <%= entityName %>', canvas);
    await expectTextInputValue('description-input', 'This is an example <%= originalName %>.', canvas);
    await expectNumberInputValue('price-input', 'â‚¬10.00', canvas);
    await expectTextInputValue('category-input', 'Example Category', canvas);
    await expectNumberInputValue('quantity-input', '10', canvas);
    await expectDropdownValue('inventory-status-input', 'Out of Stock', canvas);
    await expectNumberInputValue('rating-input', '3', canvas);
    await expectFormValid(canvas);

    // -- STEP 7: adjust the form fields
    // testing the invalidity of the form
    await expectFormInvalidByTextInput('name-input', canvas);
    await expectFormInvalidByTextInput('description-input', canvas);
    await expectFormInvalidByTextInput('price-input', canvas);
    await expectFormInvalidByTextInput('category-input', canvas);
    await expectFormInvalidByTextInput('quantity-input', canvas);
    await expectFormInvalidByTextInput('rating-input', canvas);
  },
};

export const newEntity: Story = {
  args: {
    header,
    data: null,
  },
  play: async ({ canvasElement }: { canvasElement: HTMLElement }) => {
    const canvas = getCanvas(canvasElement);

    // -- STEP 8: adjust the form fields
    await expectTextInputValue('id-input', '0', canvas);
    await expectTextInputValue('code-input', '-', canvas);
    await expectTextInputValue('name-input', '', canvas);
    await expectTextInputValue('description-input', '', canvas);
    await expectNumberInputValue('price-input', '', canvas);
    await expectTextInputValue('category-input', '', canvas);
    await expectNumberInputValue('quantity-input', '', canvas);
    await expectDropdownValue('inventory-status-input', 'Select Inventory Status', canvas);
    await expectNumberInputValue('rating-input', '', canvas);
    await expectFormInvalid(canvas);
  },
};

export const updateEntity: Story = {
  args: {
    header,
    data: {...allData[0]},
  },
  play: async ({ canvasElement }: { canvasElement: HTMLElement }) => {
    const canvas = getCanvas(canvasElement);

    // -- STEP 9: adjust the form fields
    await expectTextInputValue('id-input', '1007', canvas);
    await expectTextInputValue('name-input', 'Jane', canvas);
    await expectTextInputValue('surname-input', 'Smith', canvas);
    await expectNumberInputValue('birth-day-input', '2', canvas);
    await expectNumberInputValue('birth-month-input', '5', canvas);
    await expectNumberInputValue('birth-year-input', '1990', canvas);
    await expectFormValid(canvas, false);
    await expectSubmitButtonDisabled(canvas);
    await expectNoElem('entity-already-exists', canvas);

    // -- STEP 10: adjust the form fields
    // testing the invalidity of the form
    await expectFormInvalidByTextInput('name-input', canvas);    
    await expectFormInvalidByTextInput('birth-day-input', canvas);
    await expectFormInvalidByTextInput('birth-month-input', canvas);
  },
};

export const alreadyExists: Story = {
  args: {
    header,
    allData,
    data: { ...allData[0] },
  },
  play: async ({ canvasElement }: { canvasElement: HTMLElement }) => {
    const canvas = getCanvas(canvasElement);
    
    // -- STEP 11: adjust the form fields
    await expectTextInputValue('id-input', '1007', canvas);
    await expectTextInputValue('name-input', 'Jane', canvas);
    await expectTextInputValue('surname-input', 'Smith', canvas);
    await expectNumberInputValue('birth-day-input', '2', canvas);
    await expectNumberInputValue('birth-month-input', '5', canvas);
    await expectNumberInputValue('birth-year-input', '1990', canvas);
    await expectElem('no-changes', canvas);
    
    // -- STEP 12: adjust the form fields
    // Provoking invalidation by full data
    await typeToTextInput('name-input', 'Michael', canvas);
    await typeToTextInput('surname-input', 'Johnson', canvas);
    await typeToTextInput('birth-day-input', '15', canvas);    
    await typeToTextInput('birth-month-input', '9', canvas);
    await typeToTextInput('birth-year-input', '1985', canvas);
    await expectElem('entity-already-exists', canvas);    
    await expectFormInvalid(canvas);

    // -- STEP 13: adjust the form fields
    // Provoking invalidation by minimal necessary data
    await typeToTextInput('name-input', 'David', canvas);
    await clearTextInput('surname-input', canvas);
    await typeToTextInput('birth-day-input', '20', canvas);    
    await typeToTextInput('birth-month-input', '6', canvas);    
    await clearNumberInput('birth-year-input', canvas, true);
    await expectElem('entity-already-exists', canvas);    
    await expectFormInvalid(canvas);
  },
};

export const Loading: Story = {
  args: {
    ...loadingStory.args,
    data,
    header,
  },
  play: loadingStory.play,
};

export const Error: Story = {
  args: { ...errorStory.args, data: singleEntity, header },
  play: async ({ canvasElement }: { canvasElement: HTMLElement }) => {    
    
    const canvas = getCanvas(canvasElement);    
    // making the form dirty to avoid additional
    // messages in the dirty state
    await typeToTextInput('birth-month-input', '5', canvas);
    await expectNoElem('no-changes', canvas);
    
    if(errorStory.play) {
      await errorStory.play({canvasElement});
    }    
  },
};
